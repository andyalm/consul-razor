using System.Linq;

namespace ConsulRx
{
    public class Service
    {
        public string Id { get; set; }
        public string Name { get; set; }

        public ServiceNode[] Nodes { get; set; }

        #region Generated by ReSharper

        protected bool Equals(Service other)
        {
            return string.Equals(Id, other.Id) && string.Equals(Name, other.Name) && Nodes.SequenceEqual(other.Nodes);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Service) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (Id != null ? Id.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Name != null ? Name.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Nodes != null ? Nodes.GetHashCode() : 0);
                return hashCode;
            }
        }

        #endregion
    }

    public class ServiceNode
    {
        public string Name { get; set; }
        public string Address { get; set; }
        public int Port { get; set; }
        public string[] Tags { get; set; }

        #region Generated by ReSharper

        protected bool Equals(ServiceNode other)
        {
            return string.Equals(Name, other.Name) && string.Equals(Address, other.Address) && Port == other.Port && Equals(Tags, other.Tags);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((ServiceNode) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (Name != null ? Name.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Address != null ? Address.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ Port;
                hashCode = (hashCode * 397) ^ (Tags != null ? Tags.GetHashCode() : 0);
                return hashCode;
            }
        }

        #endregion
    }
}